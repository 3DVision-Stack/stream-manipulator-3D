# Software License Agreement (BSD License)
#
#   PaCMan Vision (PaCV) - https://github.com/Tabjones/pacman_vision
#   Copyright (c) 2015-2016, Federico Spinelli (fspinelli@gmail.com)
#   All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# * Neither the name of the copyright holder(s) nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Project top level cmake
cmake_minimum_required(VERSION 2.8.11)
project(pacman_vision)

################################################################################
###########   Control Package Build Behaviour ##################################
###########   Change these according to your will ##############################
################################################################################
## This will build estimator and tracker modules
set (PACV_BUILD_RECOGNITION        0 )
## This will build vito listener module
set (PACV_BUILD_LISTENER           0 )
## This will build in hand modeler module
set (PACV_BUILD_MODELER            0 )
## This will build Kinect2 Processor
set (PACV_BUILD_KINECT2            0 )

################################################################################
######### Check for c++11 support or we won't get far... #######################
################################################################################
INCLUDE(CheckCXXCompilerFlag)
CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
IF(COMPILER_SUPPORTS_CXX11)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
ELSEIF(COMPILER_SUPPORTS_CXX0X)
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ELSE()
  MESSAGE(ERROR "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
ENDIF()

################################################################################
########## Lets find everything we need, yes we need a lot of things! ##########
################################################################################
#Include selfmade FindFOO cmake modules, if needed for future works
#(right now there's only VCG library and it is not used)
# list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/Modules/")
#Find Boost
find_package(Boost REQUIRED
    COMPONENTS
    filesystem
    )
#Find HDF5
find_package(HDF5 REQUIRED)
#Find PCL
find_package(PCL 1.7.2 COMPONENTS common filters io registration
                segmentation sample_consensus search octree REQUIRED)
add_definitions(${PCL_DEFINITIONS})
link_directories(${PCL_LIBRARY_DIRS})
##Eigen
# find_package(Eigen REQUIRED)
##Qt
find_package(Qt4 4.8 REQUIRED QtGui QtXml)
##Find Catkin macros and libraries
find_package(catkin REQUIRED COMPONENTS
  geometry_msgs
  pcl_conversions
  roscpp
  roslib
  sensor_msgs
  tf
  pacman_vision_comm
  visualization_msgs
  cmake_modules
  )
#include a bunch of dirs to search path
include_directories(include src/pacman_vision src/basic_node/gui)
include_directories(${catkin_INCLUDE_DIRS})
include_directories(BEFORE ${PCL_INCLUDE_DIRS} SYSTEM)
include_directories(SYSTEM
                    # ${EIGEN_INCLUDE_DIRS}
                    ${HDF5_INCLUDE_DIRS}
                    ${Boost_INCLUDE_DIRS}
                    )

##Qt stuff for autogeneration of files (moc, ui and qrc)
set(CMAKE_INCLUDE_CURRENT_DIR ON) # this will add build dir to include path.
                                  # Where all this autogenerated files will go!
set(CMAKE_AUTOMOC ON)
#Sadly these don't exist in cmake 2.8, only in cmake > 3.0
# set(CMAKE_AUTOUIC ON)
# set(CMAKE_AUTORCC ON)

################################################################################
####### Set the project sources ################################################
################################################################################
set(SOURCES
    src/pacman_vision/pacman_vision.cpp
    src/pacman_vision/main.cpp
    )
#set some variables to be filled by subdirectories with external libs and incls
set(MORE_INCLUDE_DIRS )
set(MORE_LIBRARIES )
set(MORE_LINK_DIRS )
################################################################################
########### Start doing things. Add the always built common lib ################
################################################################################
add_subdirectory(src/common)
LIST(APPEND LIBRARIES
    ${PACV_COMMON_LIB})

################################################################################
########### Also add the always built basic_node as a lib ######################
################ and its Gui ###################################################
################################################################################
add_subdirectory(src/basic_node)
LIST(APPEND LIBRARIES
    ${PACV_BASICNODE_LIB})

add_subdirectory(src/basic_node/gui)
LIST(APPEND LIBRARIES
    ${PACV_BASICGUI_LIB})

################################################################################
################  Try to build recognition libraries, if specified #############
################################################################################
IF(PACV_BUILD_RECOGNITION)
    add_subdirectory(src/recognition)
    LIST(APPEND LIBRARIES
        ${PACV_RECOGNITION_LIB})
    #add GUI too
    add_subdirectory(src/recognition/gui)
    LIST(APPEND LIBRARIES
        ${PACV_RECOGNITIONGUI_LIB})
    include_directories(src/recognition/gui)
ENDIF(PACV_BUILD_RECOGNITION)

IF(PACV_BUILD_LISTENER)
    add_subdirectory(src/listener)
    LIST(APPEND LIBRARIES
        ${PACV_LISTENER_LIB})
    #add GUI too
    add_subdirectory(src/listener/gui)
    LIST(APPEND LIBRARIES
        ${PACV_LISTENERGUI_LIB})
    include_directories(src/listener/gui)
ENDIF(PACV_BUILD_LISTENER)

IF(PACV_BUILD_MODELER)
    add_subdirectory(src/modeler)
    LIST(APPEND LIBRARIES
        ${PACV_MODELER_LIB})
ENDIF(PACV_BUILD_MODELER)

include_directories(${MORE_INCLUDE_DIRS})
link_directories(${MORE_LINK_DIRS})


################################################################################
####### Create a Config File with the results of our modular build #############
################################################################################
configure_file("${PROJECT_SOURCE_DIR}/cmake/config_h.cmake.in"
  "${CATKIN_DEVEL_PREFIX}/include/pacv_config.h")
include_directories(${CATKIN_DEVEL_PREFIX}/include)

################################################################################
#### Export project and libraries through catkin ###############################
################################################################################
##Catkin specific configuration:
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS
    include
  LIBRARIES
    ${LIBRARIES}
  CATKIN_DEPENDS
    geometry_msgs
    pcl_conversions
    roscpp
    roslib
    sensor_msgs
    tf
    pacman_vision_comm
    visualization_msgs
    message_runtime
  DEPENDS
   ${MORE_LIBRARIES}
)
################################################################################
####################### Now Build the project ##################################
################################################################################

add_executable(pacman_vision ${SOURCES})

#add those ros geneated headers from communications
add_dependencies(pacman_vision
  pacman_vision_comm_generate_messages_cpp
  )

target_link_libraries(pacman_vision
    ${LIBRARIES}
    ${MORE_LIBRARIES}
    ${catkin_LIBRARIES}
    # ${PCL_COMMON_LIBRARIES}
    # ${PCL_FILTERS_LIBRARIES}
    # ${PCL_SEGMENTATION_LIBRARIES}
    # ${PCL_SAMPLE_CONSENSUS_LIBRARIES}
    # ${PCL_SEARCH_LIBRARIES}
    # ${PCL_IO_LIBRARIES}
    # ${Boost_LIBRARIES}
    # ${HDF5_LIBRARIES}
    # # ${EIGEN_LIBRARIES}
    Qt4::QtGui Qt4::QtXml
)
########################################################################## DONE!
