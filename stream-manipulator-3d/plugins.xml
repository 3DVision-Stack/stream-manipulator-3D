<library path="lib/libfilter_plugins">
    <class name="filter/cropbox" type="sm3d::filters::CropBox"
        base_class_type="sm3d::Plugin">
        <description>
            Wrapping of pcl::CropBox filter. Removes everything inside/outside a
            given box.
        </description>
    </class>
    <class name="filter/frustum_culling" type="sm3d::filters::Frustum"
        base_class_type="sm3d::Plugin">
        <description>
            Wrapping of pcl::FrustumCulling filter. Removes everything inside/outside a
            frustum, defined by two aperture angles and two parallel planes.
        </description>
    </class>
    <class name="filter/median" type="sm3d::filters::Median"
        base_class_type="sm3d::Plugin">
        <description>
            Wrapping of  pcl::MedianFilter filter. The  median filter is  one of
            the simplest and  wide-spread image processing filters.  It is known
            to perform  well with  "shot"/impulse noise (some  individual pixels
            having extreme values), it does  not reduce contrast across steps in
            the function (as compared to filters  based on averaging), and it is
            robust  to outliers.  Furthermore,  it is  simple  to implement  and
            efficient, as it requires a single  pass over the image. It consists
            of a  moving window  of fixed  size that replaces  the pixel  in the
            center with the median inside the window.

            NOTE: This filters  only the  depth (z-component)  of organized  and
            untransformed (i.e.,  in camera coordinates) point  clouds. An error
            will be outputted if an unorganized cloud is given.
        </description>
    </class>
    <class name="filter/passthrough" type="sm3d::filters::PassThrough"
        base_class_type="sm3d::Plugin">
        <description>
            Wrapping of  pcl::PassThrough filter.  PassThrough passes  points in
            a  cloud  based on  constraints  for  one  particular field  of  the
            point type.  Iterates through  the entire input  once, automatically
            filtering  non-finite points  and  the points  outside the  interval
            specified  by the  filter limits,  which applies  only to  the field
            specified by field type.
        </description>
    </class>
    <class name="filter/radius_outlier_removal" type="sm3d::filters::RadiusOutlier"
        base_class_type="sm3d::Plugin">
        <description>
            Wrapping  of pcl::RadiusOutlierRemoval  filter. RadiusOutlierRemoval
            filters points  in a  cloud based  on the  number of  neighbors they
            have. Iterates  through the entire  input once, and for  each point,
            retrieves the number of neighbors within a certain radius. The point
            will  be considered  an  outlier if  it has  too  few neighbors,  as
            determined  by k_neighbors_threshold  parameter. The  radius can  be
            changed  using radius_search  param.  The neighbors  found for  each
            query point will be found amongst ALL points of input stream.
        </description>
    </class>
    <class name="filter/statistical_outlier_removal" type="sm3d::filters::StatisticalOutlier"
        base_class_type="sm3d::Plugin">
        <description>
            Wrapping       of       pcl::StatisticalOutlierRemoval       filter.
            StatisticalOutlierRemoval  uses  point  neighborhood  statistics  to
            filter outlier data. The algorithm iterates through the entire input
            twice:  During  the first  iteration  it  will compute  the  average
            distance that each  point has to its nearest k  neighbors. The value
            of  k can  be set  using nr_k_neighbors  param. Next,  the mean  and
            standard deviation of  all these distances are computed  in order to
            determine a distance threshold. The distance threshold will be equal
            to: mean  + stddev_mult  * stddev. The  multiplier for  the standard
            deviation can  be set using stddev_multiplier  parameter. During the
            next iteration the points will be classified as inlier or outlier if
            their average  neighbor distance  is below  or above  this threshold
            respectively. Outliers  will then  be removed  from the  stream. The
            neighbors found for each query point will be found amongst ALL input
            points.
        </description>
    </class>
    <class name="filter/voxel_grid" type="sm3d::filters::VoxelGrid"
        base_class_type="sm3d::Plugin">
        <description>
            Wrapping of  pcl::VoxelGrid filter.  Downsample point cloud  data by
            overlapping a grid of voxels, with user specified dimensions.

            It creates  a 3D voxel grid  (think about a  voxel grid as a  set of
            tiny  3D boxes  in space)  over the  input point  cloud data.  Then,
            in  each voxel  (i.e.,  3D  box), all  the  points  present will  be
            approximated (i.e., downsampled) with  their centroid. This approach
            is  a bit  slower than  approximating them  with the  center of  the
            voxel, but it represents the underlying surface more accurately.
        </description>
    </class>
</library>
<library path="lib/liboutput_plugins">
    <class name="output/publisher" type="sm3d::output::Publisher"
        base_class_type="sm3d::Plugin">
        <description>
            Outputs stream to a topic of your choice.
        </description>
    </class>
</library>
